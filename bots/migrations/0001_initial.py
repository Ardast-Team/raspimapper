# Generated by Django 4.1.4 on 2022-12-12 07:04

import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CcodeTrigger',
            fields=[
                ('ccodeid', models.CharField(max_length=35, primary_key=True, serialize=False, verbose_name='Type of user code')),
                ('ccodeid_desc', models.TextField(blank=True, null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'User code type',
                'db_table': 'CcodeTrigger',
                'ordering': ['ccodeid'],
            },
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('idchannel', models.CharField(max_length=35, primary_key=True, serialize=False)),
                ('inorout', models.CharField(choices=[('in', 'in'), ('out', 'out')], max_length=35, null=True, verbose_name='in/out')),
                ('type', models.CharField(choices=[('file', 'file'), ('smtp', 'smtp'), ('smtps', 'smtps'), ('smtpstarttls', 'smtpstarttls'), ('pop3', 'pop3'), ('pop3s', 'pop3s'), ('pop3apop', 'pop3apop'), ('http', 'http'), ('https', 'https'), ('imap4', 'imap4'), ('imap4s', 'imap4s'), ('ftp', 'ftp'), ('ftps', 'ftps (explicit)'), ('ftpis', 'ftps (implicit)'), ('sftp', 'sftp (ssh)'), ('xmlrpc', 'xmlrpc'), ('mimefile', 'mimefile'), ('trash', 'trash/discard'), ('communicationscript', 'communicationscript'), ('db', 'db'), ('database', 'database (old)')], max_length=35, null=True)),
                ('charset', models.CharField(default='us-ascii', max_length=35, null=True)),
                ('host', models.CharField(blank=True, max_length=256, null=True)),
                ('port', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('username', models.CharField(blank=True, max_length=35, null=True)),
                ('secret', models.CharField(blank=True, max_length=35, null=True, verbose_name='password')),
                ('starttls', models.BooleanField(default=False, help_text='Do not check if incoming "from" email addresses is known.', null=True, verbose_name='No check from-address')),
                ('apop', models.BooleanField(default=False, help_text='Do not check if incoming "to" email addresses is known.', null=True, verbose_name='No check to-address')),
                ('remove', models.BooleanField(default=False, help_text='Delete incoming edi files after reading.<br>Use in production else files are read again and again.', null=True)),
                ('path', models.CharField(blank=True, max_length=256, null=True)),
                ('filename', models.CharField(blank=True, help_text='Incoming: use wild-cards eg: "*.edi".<br>Outgoing: many options, see <a target="_blank" href="https://botsdocs.readthedocs.io/en/latest/configuration/channel/filenames.html">documentation</a>.<br>Advised: use "*" in filename (is replaced by unique counter per channel).<br>eg "D_*.edi" gives D_1.edi, D_2.edi, etc.', max_length=70, null=True)),
                ('lockname', models.CharField(blank=True, help_text='Directory locking: if lock-file exists in directory, directory is locked for reading/writing.', max_length=35, null=True, verbose_name='Lock-file')),
                ('syslock', models.BooleanField(default=False, help_text='Use system file locks for reading or writing edi files (windows, *nix).', null=True, verbose_name='System locks')),
                ('parameters', models.CharField(blank=True, help_text='For use in user communication scripting.', max_length=70, null=True)),
                ('ftpaccount', models.CharField(blank=True, help_text='FTP accounting information; note that few systems use this.', max_length=35, null=True, verbose_name='ftp account')),
                ('ftpactive', models.BooleanField(default=False, help_text='Passive mode is used unless this is ticked.', null=True, verbose_name='ftp active mode')),
                ('ftpbinary', models.BooleanField(default=False, help_text='File transfers are ASCII unless this is ticked.', null=True, verbose_name='ftp binary transfer mode')),
                ('askmdn', models.CharField(blank=True, choices=[('always', 'Base64'), ('never', 'Never'), ('ascii', 'Base64 if not ascii')], max_length=17, null=True, verbose_name='mime encoding')),
                ('sendmdn', models.CharField(blank=True, choices=[('attachment', 'As attachment'), ('body', 'In body of email')], max_length=17, null=True, verbose_name='as body or attachment')),
                ('mdnchannel', models.CharField(blank=True, help_text='Write file than rename. Bots renames to filename without this tmp-part.<br>Eg first write "myfile.edi.tmp", tmp-part is ".tmp", rename to "myfile.edi".', max_length=35, null=True, verbose_name='Tmp-part file name')),
                ('archivepath', models.CharField(blank=True, help_text='Write edi files to an archive.<br>See <a target="_blank" href="https://botsdocs.readthedocs.io/en/latest/deployment/archiving.html#the-long-term-archive">documentation</a>. Eg: "C:/edi/archive/mychannel".', max_length=256, null=True, verbose_name='Archive path')),
                ('desc', models.TextField(blank=True, max_length=256, null=True, verbose_name='Description')),
                ('rsrv1', models.IntegerField(blank=True, help_text='Max number of connection failures of incommunication before this is reported as a processerror (default: direct report).', null=True, verbose_name='Max failures')),
                ('rsrv2', models.IntegerField(blank=True, help_text='Max seconds for in-communication channel to run. Purpose: limit incoming edi files; for large volumes it is better read more often than all files in one time.', null=True, verbose_name='Max seconds')),
                ('rsrv3', models.IntegerField(blank=True, help_text='Max number of days files are kept in archive.<br>Overrules global setting in bots.ini.', null=True, verbose_name='Max days archive')),
                ('keyfile', models.CharField(blank=True, help_text='Path to file that contains PEM formatted private key.', max_length=256, null=True, verbose_name='Private key file')),
                ('certfile', models.CharField(blank=True, help_text='Path to file that contains PEM formatted certificate chain.', max_length=256, null=True, verbose_name='Certificate chain file')),
                ('testpath', models.CharField(blank=True, help_text='Path used during acceptance tests, see <a target="_blank" href="https://botsdocs.readthedocs.io/en/latest/advanced-deployment/change-management.html#isolated-acceptance-testing">documentation</a>.', max_length=256, null=True, verbose_name='Acceptance test path')),
            ],
            options={
                'db_table': 'Channel',
                'ordering': ['idchannel'],
            },
        ),
        migrations.CreateModel(
            name='ChannelPartnerMails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('askmdn', models.BooleanField(default=False, null=True)),
                ('sendmdn', models.BooleanField(default=False, null=True)),
                ('idchannel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bots.channel', verbose_name='channel')),
            ],
            options={
                'verbose_name': 'Email address per channel',
                'verbose_name_plural': 'Email address per channel',
                'db_table': 'ChannelPartnerMails',
                'ordering': ['idpartner', 'idchannel'],
            },
        ),
        migrations.CreateModel(
            name='Filereport',
            fields=[
                ('idta', models.IntegerField(primary_key=True, serialize=False)),
                ('reportidta', models.IntegerField(null=True)),
                ('statust', models.IntegerField(choices=[(0, 'Open'), (1, 'Error'), (2, 'Stuck'), (3, 'Done'), (4, 'Resend'), (5, 'No retry')], null=True)),
                ('retransmit', models.IntegerField(null=True)),
                ('idroute', models.CharField(max_length=35, null=True)),
                ('fromchannel', models.CharField(max_length=35, null=True)),
                ('tochannel', models.CharField(max_length=35, null=True)),
                ('frompartner', models.CharField(max_length=35, null=True)),
                ('topartner', models.CharField(max_length=35, null=True)),
                ('frommail', models.CharField(max_length=256, null=True)),
                ('tomail', models.CharField(max_length=256, null=True)),
                ('ineditype', models.CharField(choices=[('csv', 'csv'), ('database', 'database (old)'), ('db', 'db'), ('edifact', 'edifact'), ('email-confirmation', 'email-confirmation'), ('excel', 'excel (only incoming)'), ('fixed', 'fixed'), ('idoc', 'idoc'), ('json', 'json'), ('jsonnocheck', 'jsonnocheck'), ('mailbag', 'mailbag'), ('raw', 'raw'), ('templatehtml', 'template-html'), ('tradacoms', 'tradacoms'), ('xml', 'xml'), ('xmlnocheck', 'xmlnocheck'), ('x12', 'x12')], max_length=35, null=True)),
                ('inmessagetype', models.CharField(max_length=35, null=True)),
                ('outeditype', models.CharField(choices=[('csv', 'csv'), ('database', 'database (old)'), ('db', 'db'), ('edifact', 'edifact'), ('email-confirmation', 'email-confirmation'), ('excel', 'excel (only incoming)'), ('fixed', 'fixed'), ('idoc', 'idoc'), ('json', 'json'), ('jsonnocheck', 'jsonnocheck'), ('mailbag', 'mailbag'), ('raw', 'raw'), ('templatehtml', 'template-html'), ('tradacoms', 'tradacoms'), ('xml', 'xml'), ('xmlnocheck', 'xmlnocheck'), ('x12', 'x12')], max_length=35, null=True)),
                ('outmessagetype', models.CharField(max_length=35, null=True)),
                ('incontenttype', models.CharField(max_length=35, null=True)),
                ('outcontenttype', models.CharField(max_length=35, null=True)),
                ('nrmessages', models.IntegerField(null=True)),
                ('ts', models.DateTimeField(db_index=True, null=True)),
                ('infilename', models.CharField(max_length=256, null=True)),
                ('inidta', models.IntegerField(null=True)),
                ('outfilename', models.CharField(max_length=256, null=True)),
                ('outidta', models.IntegerField(null=True)),
                ('divtext', models.CharField(max_length=35, null=True)),
                ('errortext', models.TextField(null=True)),
                ('rsrv1', models.CharField(blank=True, max_length=35, null=True)),
                ('rsrv2', models.IntegerField(null=True)),
                ('filesize', models.IntegerField(null=True)),
            ],
            options={
                'db_table': 'Filereport',
            },
        ),
        migrations.CreateModel(
            name='Mutex',
            fields=[
                ('mutexk', models.IntegerField(primary_key=True, serialize=False)),
                ('mutexer', models.IntegerField(default='0', null=True)),
                ('ts', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'db_table': 'Mutex',
            },
        ),
        migrations.CreateModel(
            name='Partner',
            fields=[
                ('idpartner', models.CharField(max_length=35, primary_key=True, serialize=False, verbose_name='partner identification')),
                ('active', models.BooleanField(default=False, null=True)),
                ('isgroup', models.BooleanField(default=False, help_text='Indicate if normal partner or a partner group. Partners can be assigned to partner groups.', null=True)),
                ('name', models.CharField(max_length=256, null=True)),
                ('rsrv1', models.CharField(blank=True, max_length=35, null=True)),
                ('rsrv2', models.IntegerField(null=True)),
                ('name1', models.CharField(blank=True, max_length=70, null=True)),
                ('name2', models.CharField(blank=True, max_length=70, null=True)),
                ('name3', models.CharField(blank=True, max_length=70, null=True)),
                ('address1', models.CharField(blank=True, max_length=70, null=True)),
                ('address2', models.CharField(blank=True, max_length=70, null=True)),
                ('address3', models.CharField(blank=True, max_length=70, null=True)),
                ('city', models.CharField(blank=True, max_length=35, null=True)),
                ('postalcode', models.CharField(blank=True, max_length=17, null=True)),
                ('countrysubdivision', models.CharField(blank=True, max_length=9, null=True)),
                ('countrycode', models.CharField(blank=True, max_length=3, null=True)),
                ('phone1', models.CharField(blank=True, max_length=17, null=True)),
                ('phone2', models.CharField(blank=True, max_length=17, null=True)),
                ('startdate', models.DateField(blank=True, null=True)),
                ('enddate', models.DateField(blank=True, null=True)),
                ('desc', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('attr1', models.CharField(blank=True, max_length=35, null=True, verbose_name='attr1')),
                ('attr2', models.CharField(blank=True, max_length=35, null=True, verbose_name='attr2')),
                ('attr3', models.CharField(blank=True, max_length=35, null=True, verbose_name='attr3')),
                ('attr4', models.CharField(blank=True, max_length=35, null=True, verbose_name='attr4')),
                ('attr5', models.CharField(blank=True, max_length=35, null=True, verbose_name='attr5')),
                ('group', models.ManyToManyField(blank=True, db_table='Partnergroup', limit_choices_to={'isgroup': True}, to='bots.partner')),
                ('mail2', models.ManyToManyField(blank=True, through='bots.ChannelPartnerMails', to='bots.channel')),
            ],
            options={
                'db_table': 'Partner',
                'ordering': ['idpartner'],
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('idta', models.IntegerField(primary_key=True, serialize=False)),
                ('lastreceived', models.IntegerField(null=True)),
                ('lastdone', models.IntegerField(null=True)),
                ('lastopen', models.IntegerField(null=True)),
                ('lastok', models.IntegerField(null=True)),
                ('lasterror', models.IntegerField(null=True)),
                ('send', models.IntegerField(null=True)),
                ('processerrors', models.IntegerField(null=True)),
                ('ts', models.DateTimeField(db_index=True, null=True)),
                ('type', models.CharField(max_length=35, null=True)),
                ('status', models.BooleanField(null=True)),
                ('rsrv1', models.CharField(blank=True, max_length=35, null=True)),
                ('rsrv2', models.IntegerField(null=True)),
                ('filesize', models.IntegerField(null=True)),
                ('acceptance', models.IntegerField(null=True)),
            ],
            options={
                'db_table': 'Report',
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('idta', models.AutoField(primary_key=True, serialize=False)),
                ('statust', models.IntegerField(choices=[(0, 'Open'), (1, 'Error'), (2, 'Stuck'), (3, 'Done'), (4, 'Resend'), (5, 'No retry')], default=0, null=True)),
                ('status', models.IntegerField(choices=[(1, 'Process'), (3, 'Discarded'), (200, 'Received'), (220, 'Infile'), (310, 'Parsed'), (320, 'Document-in'), (330, 'Document-out'), (400, 'Merged'), (500, 'Outfile'), (520, 'Send')], default=0, null=True)),
                ('parent', models.IntegerField(db_index=True, default=0, null=True)),
                ('child', models.IntegerField(default=0, null=True)),
                ('script', models.IntegerField(default=0, null=True)),
                ('idroute', models.CharField(default='', max_length=35, null=True)),
                ('filename', models.CharField(default='', max_length=256, null=True)),
                ('frompartner', models.CharField(default='', max_length=35, null=True)),
                ('topartner', models.CharField(default='', max_length=35, null=True)),
                ('fromchannel', models.CharField(default='', max_length=35, null=True)),
                ('tochannel', models.CharField(default='', max_length=35, null=True)),
                ('editype', models.CharField(default='', max_length=35, null=True)),
                ('messagetype', models.CharField(default='', max_length=35, null=True)),
                ('alt', models.CharField(default='', max_length=35, null=True)),
                ('divtext', models.CharField(default='', max_length=35, null=True)),
                ('merge', models.BooleanField(default=False, null=True)),
                ('nrmessages', models.IntegerField(default=0, null=True)),
                ('testindicator', models.CharField(default='', max_length=1, null=True)),
                ('reference', models.CharField(db_index=True, default='', max_length=70, null=True)),
                ('frommail', models.CharField(default='', max_length=256, null=True)),
                ('tomail', models.CharField(default='', max_length=256, null=True)),
                ('charset', models.CharField(default='', max_length=35, null=True)),
                ('statuse', models.IntegerField(default=0, null=True)),
                ('retransmit', models.BooleanField(default=False, null=True)),
                ('contenttype', models.CharField(default='text/plain', max_length=35, null=True)),
                ('errortext', models.TextField(default='', null=True)),
                ('ts', models.DateTimeField(default=datetime.datetime.now, null=True)),
                ('confirmasked', models.BooleanField(default=False, null=True)),
                ('confirmed', models.BooleanField(default=False, null=True)),
                ('confirmtype', models.CharField(default='', max_length=35, null=True)),
                ('confirmidta', models.IntegerField(default=0, null=True)),
                ('envelope', models.CharField(default='', max_length=35, null=True)),
                ('botskey', models.CharField(default='', max_length=35, null=True)),
                ('cc', models.CharField(default='', max_length=512, null=True)),
                ('rsrv1', models.CharField(default='', max_length=70, null=True)),
                ('rsrv2', models.IntegerField(default=0, null=True)),
                ('rsrv3', models.CharField(default='', max_length=35, null=True)),
                ('rsrv4', models.IntegerField(default=0, null=True)),
                ('rsrv5', models.CharField(default='', max_length=35, null=True)),
                ('filesize', models.IntegerField(default=0, null=True)),
                ('numberofresends', models.IntegerField(default=0, null=True)),
            ],
            options={
                'db_table': 'Transaction',
            },
        ),
        migrations.CreateModel(
            name='Unique',
            fields=[
                ('domain', models.CharField(max_length=70, primary_key=True, serialize=False, verbose_name='Counter domain')),
                ('number', models.IntegerField(null=True, verbose_name='Last used number')),
            ],
            options={
                'verbose_name': 'Counter',
                'db_table': 'Unique',
                'ordering': ['domain'],
            },
        ),
        migrations.CreateModel(
            name='Translate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False)),
                ('fromeditype', models.CharField(choices=[('csv', 'csv'), ('database', 'database (old)'), ('db', 'db'), ('edifact', 'edifact'), ('email-confirmation', 'email-confirmation'), ('excel', 'excel (only incoming)'), ('fixed', 'fixed'), ('idoc', 'idoc'), ('json', 'json'), ('jsonnocheck', 'jsonnocheck'), ('mailbag', 'mailbag'), ('raw', 'raw'), ('templatehtml', 'template-html'), ('tradacoms', 'tradacoms'), ('xml', 'xml'), ('xmlnocheck', 'xmlnocheck'), ('x12', 'x12')], help_text='Editype to translate from.', max_length=35)),
                ('frommessagetype', models.CharField(help_text='Messagetype to translate from.', max_length=35)),
                ('alt', models.CharField(blank=True, help_text='Do translation only for this alternative translation.', max_length=35, verbose_name='Alternative translation')),
                ('tscript', models.CharField(help_text='Mappingscript to use in translation.', max_length=70, verbose_name='Mapping Script')),
                ('toeditype', models.CharField(choices=[('csv', 'csv'), ('database', 'database (old)'), ('db', 'db'), ('edifact', 'edifact'), ('email-confirmation', 'email-confirmation'), ('excel', 'excel (only incoming)'), ('fixed', 'fixed'), ('idoc', 'idoc'), ('json', 'json'), ('jsonnocheck', 'jsonnocheck'), ('mailbag', 'mailbag'), ('raw', 'raw'), ('templatehtml', 'template-html'), ('tradacoms', 'tradacoms'), ('xml', 'xml'), ('xmlnocheck', 'xmlnocheck'), ('x12', 'x12')], help_text='Editype to translate to.', max_length=35)),
                ('tomessagetype', models.CharField(help_text='Messagetype to translate to.', max_length=35)),
                ('desc', models.TextField(blank=True, max_length=256, null=True, verbose_name='Description')),
                ('rsrv1', models.CharField(blank=True, max_length=35, null=True)),
                ('rsrv2', models.IntegerField(null=True)),
                ('frompartner', models.ForeignKey(blank=True, help_text='Do translation only for this frompartner.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='tfrompartner', to='bots.partner')),
                ('topartner', models.ForeignKey(blank=True, help_text='Do translation only for this topartner.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='ttopartner', to='bots.partner')),
            ],
            options={
                'verbose_name': 'Translation rule',
                'db_table': 'Translate',
                'ordering': ['fromeditype', 'frommessagetype', 'frompartner', 'topartner', 'alt'],
            },
        ),
        migrations.CreateModel(
            name='Persist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(max_length=35, null=True)),
                ('botskey', models.CharField(max_length=35, null=True)),
                ('content', models.TextField(null=True)),
                ('ts', models.DateTimeField(null=True)),
            ],
            options={
                'db_table': 'Persist',
                'unique_together': {('domain', 'botskey')},
            },
        ),
        migrations.CreateModel(
            name='PartnerMailCC',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cc', models.EmailField(max_length=70)),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bots.partner')),
            ],
        ),
        migrations.CreateModel(
            name='PartnerMail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mail', models.EmailField(max_length=70)),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bots.partner')),
            ],
        ),
        migrations.CreateModel(
            name='ConfirmRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False)),
                ('confirmtype', models.CharField(choices=[('ask-email-MDN', 'ask an email confirmation (MDN) when sending'), ('send-email-MDN', 'send an email confirmation (MDN) when receiving'), ('ask-x12-997', 'ask a x12 confirmation (997) when sending'), ('send-x12-997', 'send a x12 confirmation (997) when receiving'), ('ask-edifact-CONTRL', 'ask an edifact confirmation (CONTRL) when sending'), ('send-edifact-CONTRL', 'send an edifact confirmation (CONTRL) when receiving')], max_length=35)),
                ('ruletype', models.CharField(choices=[('all', 'Confirm all'), ('route', 'Route'), ('channel', 'Channel'), ('frompartner', 'Frompartner'), ('topartner', 'Topartner'), ('messagetype', 'Messagetype')], max_length=35)),
                ('negativerule', models.BooleanField(default=False, help_text='Use to exclude. Bots first checks positive rules, than negative rules. Eg include certain channel, exclude partner XXX.')),
                ('idroute', models.CharField(blank=True, max_length=35, null=True, verbose_name='route')),
                ('editype', models.CharField(blank=True, choices=[('csv', 'csv'), ('database', 'database (old)'), ('db', 'db'), ('edifact', 'edifact'), ('email-confirmation', 'email-confirmation'), ('excel', 'excel (only incoming)'), ('fixed', 'fixed'), ('idoc', 'idoc'), ('json', 'json'), ('jsonnocheck', 'jsonnocheck'), ('mailbag', 'mailbag'), ('raw', 'raw'), ('templatehtml', 'template-html'), ('tradacoms', 'tradacoms'), ('xml', 'xml'), ('xmlnocheck', 'xmlnocheck'), ('x12', 'x12')], max_length=35)),
                ('messagetype', models.CharField(blank=True, help_text='Eg "850004010" (x12) or "ORDERSD96AUN" (edifact).', max_length=35)),
                ('rsrv1', models.CharField(blank=True, max_length=35, null=True)),
                ('rsrv2', models.IntegerField(null=True)),
                ('frompartner', models.ForeignKey(blank=True, limit_choices_to={'isgroup': False}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cfrompartner', to='bots.partner')),
                ('idchannel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bots.channel', verbose_name='channel')),
                ('topartner', models.ForeignKey(blank=True, limit_choices_to={'isgroup': False}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ctopartner', to='bots.partner')),
            ],
            options={
                'verbose_name': 'Confirm rule',
                'db_table': 'ConfirmRule',
                'ordering': ['confirmtype', 'ruletype', 'negativerule', 'frompartner', 'topartner', 'idroute', 'idchannel', 'messagetype'],
            },
        ),
        migrations.AddField(
            model_name='channelpartnermails',
            name='idpartner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bots.partner', verbose_name='partner'),
        ),
        migrations.CreateModel(
            name='ChannelPartnerMail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mail', models.EmailField(max_length=70)),
                ('cc', models.EmailField(max_length=70)),
                ('chanpar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bots.channelpartnermails')),
            ],
            options={
                'verbose_name': 'Email address per channel',
                'verbose_name_plural': 'Email address per channel',
                'db_table': 'ChannelPartnerMail',
                'ordering': ['chanpar'],
            },
        ),
        migrations.CreateModel(
            name='Partnergroup',
            fields=[
            ],
            options={
                'db_table': 'Partner',
                'ordering': ['idpartner'],
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('bots.partner',),
        ),
        migrations.CreateModel(
            name='Routes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idroute', models.CharField(db_index=True, help_text='Identification of route; a composite route consists of multiple parts having the same "idroute".', max_length=35)),
                ('seq', models.PositiveIntegerField(default=1, help_text='For routes consisting of multiple parts, this indicates the order these parts are run.', verbose_name='Sequence')),
                ('active', models.BooleanField(default=False, help_text='Bots-engine only uses active routes.')),
                ('fromeditype', models.CharField(blank=True, choices=[('csv', 'csv'), ('database', 'database (old)'), ('db', 'db'), ('edifact', 'edifact'), ('email-confirmation', 'email-confirmation'), ('excel', 'excel (only incoming)'), ('fixed', 'fixed'), ('idoc', 'idoc'), ('json', 'json'), ('jsonnocheck', 'jsonnocheck'), ('mailbag', 'mailbag'), ('raw', 'raw'), ('templatehtml', 'template-html'), ('tradacoms', 'tradacoms'), ('xml', 'xml'), ('xmlnocheck', 'xmlnocheck'), ('x12', 'x12')], help_text='Editype of the incoming edi files.', max_length=35)),
                ('frommessagetype', models.CharField(blank=True, help_text='Messagetype of incoming edi files. For edifact: messagetype=edifact; for x12: messagetype=x12.', max_length=35)),
                ('toeditype', models.CharField(blank=True, choices=[('csv', 'csv'), ('database', 'database (old)'), ('db', 'db'), ('edifact', 'edifact'), ('email-confirmation', 'email-confirmation'), ('excel', 'excel (only incoming)'), ('fixed', 'fixed'), ('idoc', 'idoc'), ('json', 'json'), ('jsonnocheck', 'jsonnocheck'), ('mailbag', 'mailbag'), ('raw', 'raw'), ('templatehtml', 'template-html'), ('tradacoms', 'tradacoms'), ('xml', 'xml'), ('xmlnocheck', 'xmlnocheck'), ('x12', 'x12')], help_text='Filter edi files of this editype for outgoing channel.', max_length=35)),
                ('tomessagetype', models.CharField(blank=True, help_text='Filter edi files of this messagetype for outgoing channel.', max_length=35)),
                ('alt', models.CharField(blank=True, default='', help_text='Use if there is more than one "translation" for the same editype and messagetype.', max_length=35, verbose_name='Alternative translation')),
                ('testindicator', models.CharField(blank=True, help_text='Filter edi files with this test-indicator for outgoing channel.', max_length=1)),
                ('translateind', models.IntegerField(choices=[(0, 'Nothing'), (1, 'Translate'), (2, 'Pass-through'), (3, 'Parse & Pass-through')], default=1, help_text='Indicates what to do with incoming files for this route(part).', verbose_name='translate')),
                ('notindefaultrun', models.BooleanField(blank=True, default=False, help_text='Do not use this route in a normal run. Advanced, related to scheduling specific routes or not.', verbose_name='Not in default run')),
                ('desc', models.TextField(blank=True, max_length=256, null=True, verbose_name='Description')),
                ('rsrv1', models.CharField(blank=True, max_length=35, null=True)),
                ('rsrv2', models.IntegerField(blank=True, null=True)),
                ('defer', models.BooleanField(blank=True, default=False, help_text='Set ready for communication, defer actual communication. Communication is done later in another route(-part).')),
                ('zip_incoming', models.IntegerField(blank=True, choices=[(1, 'Always unzip file'), (2, 'If zip-file: unzip')], help_text='Unzip received files.', null=True, verbose_name='Incoming zip-file handling')),
                ('zip_outgoing', models.IntegerField(blank=True, choices=[(1, 'Always zip')], help_text='Send files as zip-files.', null=True, verbose_name='Outgoing zip-file handling')),
                ('fromchannel', models.ForeignKey(blank=True, help_text='Receive edi files via this communication channel.', limit_choices_to={'inorout': 'in'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rfromchannel', to='bots.channel', verbose_name='incoming channel')),
                ('frompartner', models.ForeignKey(blank=True, help_text='The frompartner of the incoming edi files.', limit_choices_to={'isgroup': False}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rfrompartner', to='bots.partner')),
                ('frompartner_tochannel', models.ForeignKey(blank=True, help_text='Filter edi files of this partner/partnergroup for outgoing channel', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='rfrompartner_tochannel', to='bots.partner')),
                ('tochannel', models.ForeignKey(blank=True, help_text='Send edi files via this communication channel.', limit_choices_to={'inorout': 'out'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rtochannel', to='bots.channel', verbose_name='outgoing channel')),
                ('topartner', models.ForeignKey(blank=True, help_text='The topartner of the incoming edi files.', limit_choices_to={'isgroup': False}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rtopartner', to='bots.partner')),
                ('topartner_tochannel', models.ForeignKey(blank=True, help_text='Filter edi files of this partner/partnergroup for outgoing channel', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='rtopartner_tochannel', to='bots.partner')),
            ],
            options={
                'verbose_name': 'Route',
                'db_table': 'Routes',
                'ordering': ['idroute', 'seq'],
                'unique_together': {('idroute', 'seq')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='channelpartnermails',
            unique_together={('idpartner', 'idchannel')},
        ),
        migrations.CreateModel(
            name='Ccode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('leftcode', models.CharField(db_index=True, max_length=35)),
                ('rightcode', models.CharField(db_index=True, max_length=70)),
                ('attr1', models.CharField(blank=True, max_length=70)),
                ('attr2', models.CharField(blank=True, max_length=35)),
                ('attr3', models.CharField(blank=True, max_length=35)),
                ('attr4', models.CharField(blank=True, max_length=35)),
                ('attr5', models.CharField(blank=True, max_length=35)),
                ('attr6', models.CharField(blank=True, max_length=35)),
                ('attr7', models.CharField(blank=True, max_length=35)),
                ('attr8', models.CharField(blank=True, max_length=35)),
                ('ccodeid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bots.ccodetrigger', verbose_name='Type of user code')),
            ],
            options={
                'verbose_name': 'User code',
                'db_table': 'Ccode',
                'ordering': ['ccodeid', 'leftcode'],
                'unique_together': {('ccodeid', 'leftcode', 'rightcode')},
            },
        ),
    ]
